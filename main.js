// Generated by CoffeeScript 1.4.0
(function() {
  var bsort, canvas, checkDone, checkDoneInterval, colours, context, defer, height, index, initColours, isort, qsort, rectHeight, rectWidth, reset, sort, start, swapRects, timeouts, toHslString, width, _ref;

  _ref = [20, 20], rectWidth = _ref[0], rectHeight = _ref[1];

  checkDoneInterval = null;

  colours = null;

  context = null;

  height = null;

  index = null;

  start = null;

  width = null;

  canvas = null;

  timeouts = [];

  defer = function(fn) {
    return timeouts.push(window.setTimeout(fn, 0));
  };

  toHslString = function(h) {
    return "hsl(" + h + ", 100%, 50%)";
  };

  initColours = function() {
    var hue, val, x, y, _i, _results;
    _results = [];
    for (x = _i = 0; 0 <= width ? _i < width : _i > width; x = _i += rectWidth) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (y = _j = 0; 0 <= height ? _j < height : _j > height; y = _j += rectHeight) {
          val = Math.random();
          hue = Math.floor(256 * val);
          colours.push({
            val: val,
            hue: hue,
            x: x,
            y: y
          });
          context.fillStyle = toHslString(hue);
          _results1.push(context.fillRect(x, y, rectWidth, rectHeight));
        }
        return _results1;
      })());
    }
    return _results;
  };

  checkDone = function() {
    var end, i, ms, _i, _ref1;
    for (i = _i = 1, _ref1 = colours.length; 1 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 1 <= _ref1 ? ++_i : --_i) {
      if (colours[i - 1].val > colours[i].val) {
        return;
      }
    }
    end = Date.now();
    window.clearInterval(checkDoneInterval);
    ms = end - start;
    $('#algoName').html($('#algo').val());
    return $('#ms').html(ms);
  };

  reset = function() {
    var timeout, win, _ref1;
    if (checkDoneInterval != null) {
      window.clearInterval(checkDoneInterval);
    }
    while ((timeout = timeouts.pop())) {
      window.clearTimeout(timeout);
    }
    colours = [];
    index = 1;
    win = $(document);
    _ref1 = [$(document).width(), $(document).height()], width = _ref1[0], height = _ref1[1];
    canvas.attr('width', width);
    canvas.attr('height', height);
    context = canvas[0].getContext('2d');
    start = Date.now();
    initColours();
    defer(sort);
    return checkDoneInterval = window.setInterval(checkDone, 10);
  };

  swapRects = function(ind1, ind2) {
    var swap, val1, val2;
    val1 = colours[ind1];
    val2 = colours[ind2];
    swap = function(field) {
      var tmp;
      tmp = val1[field];
      val1[field] = val2[field];
      return val2[field] = tmp;
    };
    swap('val');
    swap('hue');
    context.fillStyle = toHslString(val1.hue);
    context.fillRect(val1.x, val1.y, rectWidth, rectHeight);
    context.fillStyle = toHslString(val2.hue);
    return context.fillRect(val2.x, val2.y, rectWidth, rectHeight);
  };

  isort = function() {
    var j, _i;
    for (j = _i = index; index <= 0 ? _i < 0 : _i > 0; j = index <= 0 ? ++_i : --_i) {
      if (colours[j - 1].val > colours[j].val) {
        swapRects(j - 1, j);
      }
    }
    index++;
    if (index < colours.length) {
      return defer(isort);
    }
  };

  bsort = function() {
    var i, swapped, _i, _ref1;
    swapped = false;
    for (i = _i = 1, _ref1 = colours.length; 1 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 1 <= _ref1 ? ++_i : --_i) {
      if (colours[i - 1].val > colours[i].val) {
        swapRects(i - 1, i);
        swapped = true;
      }
    }
    if (swapped) {
      return defer(bsort);
    }
  };

  qsort = function(tukey) {
    var doQsort, getPivotInd, medianOfThree, partition;
    medianOfThree = function(a, b, c) {
      var m0, m1, m2;
      m0 = b;
      m1 = a;
      m2 = c;
      if (colours[m1].val < colours[m0].val) {
        swapRects(m1, m0);
      }
      if (colours[m2].val < colours[m1].val) {
        swapRects(m2, m1);
      }
      if (colours[m1].val < colours[m0].val) {
        return swapRects(m1, m0);
      }
    };
    getPivotInd = function(from, to) {
      var mid, s;
      mid = Math.floor(from + (to - from) / 2);
      if (!tukey) {
        return mid;
      }
      if (to - from > 40) {
        s = Math.floor((to - from) / 8);
        medianOfThree(from, from + s, from + 2 * s);
        medianOfThree(mid, mid - s, mid + s);
        medianOfThree(to - 1, to - 1 - s, to - 1 - 2 * s);
      }
      medianOfThree(from, mid, to - 1);
      return from;
    };
    partition = function(from, to, pivotInd) {
      var i, pivot, _i;
      pivot = colours[pivotInd].val;
      swapRects(pivotInd, to);
      pivotInd = from;
      for (i = _i = from; from <= to ? _i < to : _i > to; i = from <= to ? ++_i : --_i) {
        if (colours[i].val <= pivot) {
          swapRects(i, pivotInd);
          pivotInd++;
        }
      }
      swapRects(pivotInd, to);
      return pivotInd;
    };
    doQsort = function(from, to) {
      var pivotInd;
      if (from >= to) {
        return;
      }
      pivotInd = getPivotInd(from, to);
      pivotInd = partition(from, to, pivotInd);
      return defer(function() {
        doQsort(from, pivotInd - 1);
        return doQsort(pivotInd + 1, to);
      });
    };
    return doQsort(0, colours.length - 1);
  };

  sort = bsort;

  $(document).ready(function() {
    canvas = $('#mainCanvas');
    $('#squareSize').val(rectWidth);
    window.onresize = function() {
      return reset();
    };
    $('#algo').change(function() {
      var selected;
      selected = $('#algo').val();
      sort = (function() {
        switch ($(this).children(':selected').attr('id')) {
          case 'bsort':
            return bsort;
          case 'isort':
            return isort;
          case 'qsort1':
            return function() {
              return qsort(false);
            };
          case 'qsort2':
            return function() {
              return qsort(true);
            };
        }
      }).call(this);
      return reset();
    });
    $('#squareSize').change(function() {
      var n;
      n = parseInt($('#squareSize').val(), 10);
      if (isNaN(n)) {
        return;
      }
      rectWidth = rectHeight = n;
      return reset();
    });
    $('#reset').click(function() {
      return reset();
    });
    return reset();
  });

}).call(this);
